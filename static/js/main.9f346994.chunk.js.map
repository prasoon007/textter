{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","placeholder","onChange","event","target","background","rows","newText","toUpperCase","updateAlert","toLowerCase","revStr","split","reverse","join","camelCase","replace","word","index","length","indexOf","Alert","alert","role","lower","charAt","slice","capitalise","msg","App","setMode","setAlert","message","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9f346994.chunk.js","sourcesContent":["import React from \"react\";\n// import PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">\n          {props.title}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"/navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\n                Home\n              </a>\n            </li>\n            {/* <li className=\"nav-item\">\n              <a className=\"nav-link active\" href=\"/about\">\n                About\n              </a>\n            </li> */}\n          </ul>\n          <div className={`custom-control custom-switch text-${props.mode==='light'?'dark':'light'}`}>\n            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch1\" onClick={props.toggleMode}/>\n            <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Switch Mode</label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React, { useState } from \"react\";\n// import PropTypes from \"prop-types\";\n\nexport default function TextForm(props) {\n  const [text, setText] = useState(\"\");\n\n  let onClickUpHandle = () => {\n    let newText = text.toUpperCase();\n    setText(newText);\n    newText && props.updateAlert('Converted to upper case', 'success');\n  };\n\n  let onCLickLowHandle = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    newText && props.updateAlert('Converted to lower case', 'success');\n\n  };\n\n  let onChangeHandle = (event) => {\n    setText(event.target.value);\n  };\n\n  let onClickClear = () => {\n    setText(\"\");\n    props.updateAlert('Text cleared', 'success');\n  };\n\n  let onClickReverse = () => {\n    let revStr = text.split(\" \").reverse().join(\" \");\n    setText(revStr);\n    revStr && props.updateAlert('Text reversed', 'success');\n  };\n\n  let onClickCamel = () => {\n    let camelCase = text\n      .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => {\n        return index === 0 ? word.toLowerCase() : word.toUpperCase();\n      })\n      .replace(/\\s+/g, \"\");\n    setText(camelCase);\n    camelCase && props.updateAlert('Converted to camel case', 'success');\n  };\n\n  return (\n    <>\n      <div style={{color: props.mode === 'dark'?'white':'black'}}>\n        <div>\n          <h2>{props.heading}</h2>\n          <div className=\"mb-3\">\n            <textarea\n              value={text}\n              placeholder=\"Enter Your text here\"\n              className=\"form-control\"\n              onChange={onChangeHandle}\n              style={{ background: props.mode === \"dark\" ? \"grey\" : \"white\",\n                       color: props.mode === \"dark\" ? \"white\" : \"black\"}}\n              id=\"myBox\"\n              rows=\"8\"\n            ></textarea>\n          </div>\n          <button onClick={onClickUpHandle} className=\"btn btn-primary mx-1\">\n            Convert to upper case\n          </button>\n          <button onClick={onCLickLowHandle} className=\"btn-primary btn mx-1\">\n            Convert to lower case\n          </button>\n          <button onClick={onClickClear} className=\"btn-primary btn mx-1\">\n            Clear\n          </button>\n          <button onClick={onClickReverse} className=\"btn btn-primary btn mx-1\">\n            Reverse\n          </button>\n          <button onClick={onClickCamel} className=\"btn btn-primary btn mx-1\">\n            camelCase\n          </button>\n        </div>\n        <div className=\"container my-3\" >\n          <h3>Text Analysis</h3>\n        <p>{text === \"\" ? 0:text.split(\" \").length * 0.008} Minutes Read</p>\n          <p>Above text contain {text.indexOf(' ') === text.length-1 || text === \"\" ? (text.split(\" \").length-1):text.split(\" \").length} Words</p>\n          <p>Above text contain {text.length} letters</p>\n          <h3>Text Preview</h3>\n          <p>{text.length>0?text:'Enter Something to preview'}</p>\n        </div>\n      </div>\n    </>\n  );\n}\n\n","import React from \"react\";\n\nfunction Alert(props) {\n  const capitalise = (word) => {\n    let lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  }\n  return (\n    props.alert && <div\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n      role=\"alert\"\n    >\n        <strong>{capitalise(props.alert.type)}! {props.alert.msg}</strong>\n    </div>\n  );\n}\n\nexport default Alert;\n","import \"./App.css\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport React, { useState } from \"react\";\n// import { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const updateAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      updateAlert(\"Switched to light mode\", \"success\");\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      updateAlert(\"Switched to dark mode\", \"success\");\n\n      // setInterval(() => {\n      //   document.body.style.background = 'blue';\n      // }, 1500);\n\n      // setInterval(() => {\n      //   document.body.style.background = 'red';\n      // }, 2000);\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"Textter\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n        {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\"> */}\n            <TextForm mode={mode} updateAlert={updateAlert}/>\n          {/* </Route>\n        </Switch> */}\n        </div>\n       {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}